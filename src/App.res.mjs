// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as DateFns from "date-fns";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import MonacoJsx from "./Monaco.jsx";
import * as Color from "@texel/color";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import DropdownJsx from "./Dropdown.jsx";
import * as Tb from "react-icons/tb";
import * as JsxRuntime from "react/jsx-runtime";
import * as ExportFunctionsJs from "./exportFunctions.js";
import * as UseLocalStorageJs from "./useLocalStorage.js";
import UseLocalStorageJs$1 from "./useLocalStorage.js";
import ReactTextareaAutosize from "react-textarea-autosize";

function getElementByClassOp(s) {
  return Core__Option.flatMap(Caml_option.nullable_to_opt(document.getElementsByClassName(s)), (function (x) {
                return x[0];
              }));
}

function App$TextArea(props) {
  var __disabled = props.disabled;
  var __readonly = props.readonly;
  var __className = props.className;
  var onChange = props.onChange;
  var className = __className !== undefined ? __className : "";
  var readonly = __readonly !== undefined ? __readonly : false;
  var disabled = __disabled !== undefined ? __disabled : false;
  return JsxRuntime.jsx(ReactTextareaAutosize, {
              value: props.content,
              className: [
                  "w-full bg-transparent",
                  className
                ].join(" "),
              onChange: (function (e) {
                  var value = e.target.value;
                  onChange(value);
                }),
              readOnly: readonly,
              disabled: disabled
            });
}

var standardDateFormat = "y-MM-dd";

function getMonthForWeekOfYear(weekNumber, year) {
  var firstDayOfYear = new Date(year, 0, 1);
  var dayOfWeek = firstDayOfYear.getDay();
  if (dayOfWeek !== 1) {
    var offset = dayOfWeek === 0 ? 1 : 8 - dayOfWeek | 0;
    firstDayOfYear.setDate(firstDayOfYear.getDate() + offset | 0);
  }
  var dateOfWeek = new Date(firstDayOfYear.getTime());
  dateOfWeek.setDate(firstDayOfYear.getDate() + Math.imul(weekNumber - 1 | 0, 7) | 0);
  return dateOfWeek.getMonth() + 1 | 0;
}

function useStateWithGetter(initial) {
  var match = React.useState(initial);
  var state = match[0];
  var stateRef = React.useRef(state);
  React.useEffect((function () {
          stateRef.current = state;
        }), [state]);
  var getState = function () {
    return stateRef.current;
  };
  return [
          state,
          match[1],
          getState
        ];
}

function entryDateString(date) {
  switch (date.TAG) {
    case "Year" :
        return date._0.toString().padStart(4, "0");
    case "Quarter" :
        return date._0.toString().padStart(4, "0") + "-Q" + date._1.toString();
    case "Month" :
        return date._0.toString().padStart(4, "0") + "-" + date._1.toString().padStart(2, "0");
    case "Week" :
        return date._0.toString().padStart(4, "0") + "-W" + date._1.toString();
    case "Date" :
        return DateFns.format(new Date(date._0, date._1 - 1 | 0, date._2), standardDateFormat);
    
  }
}

function allDays(start, end) {
  var inc = new Date(start.getTime());
  var dayDiff = Math.floor((end.getTime() - inc.getTime()) / 86400000) | 0;
  return Core__Array.make(dayDiff, false).map(function (param, _i) {
              var result = new Date(inc.getTime());
              inc.setDate(inc.getDate() + 1 | 0);
              return result;
            });
}

function allYears(start, end) {
  var startYear = start.getFullYear();
  var endYear = end.getFullYear();
  return Core__Array.make(endYear - startYear | 0, false).map(function (param, i) {
              return new Date(startYear + i | 0, 0, 1);
            });
}

function hsl(h, s, l) {
  return Color.RGBToHex(Color.convert([
                  h,
                  s,
                  l
                ], Color.OKHSL, Color.sRGB));
}

function monthHue(monthInt) {
  return 360 / 12 * Math.imul(monthInt - 3 | 0, 5) % 360.0;
}

var monthColors = Core__Array.make(12, false).map(function (param, i) {
      return hsl(monthHue(i), 1.0, 0.55);
    });

var monthColorsDim = Core__Array.make(12, false).map(function (param, i) {
      return hsl(monthHue(i), 1.0, 0.8);
    });

function monthColor(monthInt) {
  return monthColors[monthInt - 1 | 0];
}

function monthColorDim(monthInt) {
  return monthColorsDim[monthInt - 1 | 0];
}

var monthColors$1 = Core__Array.make(12, false).map(function (param, i) {
      return hsl(monthHue(i), 1.0, 0.7);
    });

var monthColorsDim$1 = Core__Array.make(12, false).map(function (param, i) {
      return hsl(monthHue(i), 1.0, 0.4);
    });

function monthColor$1(monthInt) {
  return monthColors$1[monthInt - 1 | 0];
}

function monthColorDim$1(monthInt) {
  return monthColorsDim$1[monthInt - 1 | 0];
}

function colorsByTheme(theme) {
  if (theme === "dark") {
    return [
            monthColor$1,
            monthColorDim$1
          ];
  } else {
    return [
            monthColor,
            monthColorDim
          ];
  }
}

function App$Months(props) {
  var onClick = props.onClick;
  var dateSet = props.dateSet;
  var theme = UseLocalStorageJs.useLocalStorageListener("theme", "light");
  var match = colorsByTheme(theme);
  var monthColor = match[0];
  return JsxRuntime.jsx("div", {
              children: allYears(props.start, props.end).map(function (d) {
                    var year = d.getFullYear();
                    var hasYearEntry = dateSet.has(entryDateString({
                              TAG: "Year",
                              _0: year
                            }));
                    var hasQ1Entry = dateSet.has(entryDateString({
                              TAG: "Quarter",
                              _0: year,
                              _1: 1
                            }));
                    var hasQ2Entry = dateSet.has(entryDateString({
                              TAG: "Quarter",
                              _0: year,
                              _1: 2
                            }));
                    var hasQ3Entry = dateSet.has(entryDateString({
                              TAG: "Quarter",
                              _0: year,
                              _1: 3
                            }));
                    var hasQ4Entry = dateSet.has(entryDateString({
                              TAG: "Quarter",
                              _0: year,
                              _1: 4
                            }));
                    return JsxRuntime.jsxs("div", {
                                children: [
                                  JsxRuntime.jsx("button", {
                                        children: JsxRuntime.jsx("div", {
                                              children: DateFns.format(d, "y"),
                                              className: "-rotate-90"
                                            }),
                                        className: [
                                            "monthview-" + entryDateString({
                                                  TAG: "Year",
                                                  _0: year
                                                }),
                                            "font-medium text-sm leading-none flex flex-row items-center justify-center overflow-hidden",
                                            hasYearEntry ? "text-white " : "text-inherit "
                                          ].join(" "),
                                        style: {
                                          gridArea: "year"
                                        },
                                        onClick: (function (param) {
                                            onClick({
                                                  TAG: "Year",
                                                  _0: year
                                                });
                                          })
                                      }),
                                  JsxRuntime.jsx("button", {
                                        children: JsxRuntime.jsx("div", {
                                              children: "Q1",
                                              className: ""
                                            }),
                                        className: [
                                            "monthview-" + entryDateString({
                                                  TAG: "Quarter",
                                                  _0: year,
                                                  _1: 1
                                                }),
                                            " flex flex-row items-center justify-center",
                                            hasQ1Entry ? "text-white " : "text-inherit "
                                          ].join(" "),
                                        style: {
                                          gridArea: "q1"
                                        },
                                        onClick: (function (param) {
                                            onClick({
                                                  TAG: "Quarter",
                                                  _0: year,
                                                  _1: 1
                                                });
                                          })
                                      }),
                                  JsxRuntime.jsx("button", {
                                        children: JsxRuntime.jsx("div", {
                                              children: "Q2",
                                              className: ""
                                            }),
                                        className: [
                                            "monthview-" + entryDateString({
                                                  TAG: "Quarter",
                                                  _0: year,
                                                  _1: 2
                                                }),
                                            " flex flex-row items-center justify-center",
                                            hasQ2Entry ? "text-white " : "text-inherit "
                                          ].join(" "),
                                        style: {
                                          gridArea: "q2"
                                        },
                                        onClick: (function (param) {
                                            onClick({
                                                  TAG: "Quarter",
                                                  _0: year,
                                                  _1: 2
                                                });
                                          })
                                      }),
                                  JsxRuntime.jsx("button", {
                                        children: JsxRuntime.jsx("div", {
                                              children: "Q3",
                                              className: ""
                                            }),
                                        className: [
                                            "monthview-" + entryDateString({
                                                  TAG: "Quarter",
                                                  _0: year,
                                                  _1: 3
                                                }),
                                            " flex flex-row items-center justify-center",
                                            hasQ3Entry ? "text-white " : "text-inherit "
                                          ].join(" "),
                                        style: {
                                          gridArea: "q3"
                                        },
                                        onClick: (function (param) {
                                            onClick({
                                                  TAG: "Quarter",
                                                  _0: year,
                                                  _1: 3
                                                });
                                          })
                                      }),
                                  JsxRuntime.jsx("button", {
                                        children: JsxRuntime.jsx("div", {
                                              children: "Q4",
                                              className: ""
                                            }),
                                        className: [
                                            "monthview-" + entryDateString({
                                                  TAG: "Quarter",
                                                  _0: year,
                                                  _1: 4
                                                }),
                                            " flex flex-row items-center justify-center",
                                            hasQ4Entry ? "text-white " : "text-inherit "
                                          ].join(" "),
                                        style: {
                                          gridArea: "q4"
                                        },
                                        onClick: (function (param) {
                                            onClick({
                                                  TAG: "Quarter",
                                                  _0: year,
                                                  _1: 4
                                                });
                                          })
                                      }),
                                  Core__Array.make(12, false).map(function (_v, i) {
                                        var monthNum = (i + 1 | 0).toString();
                                        var monthDate = new Date(year, i);
                                        var hasEntry = dateSet.has(entryDateString({
                                                  TAG: "Month",
                                                  _0: year,
                                                  _1: i + 1 | 0
                                                }));
                                        return JsxRuntime.jsx("button", {
                                                    children: JsxRuntime.jsx("div", {
                                                          children: DateFns.format(monthDate, "MMM"),
                                                          className: ""
                                                        }),
                                                    className: [
                                                        "monthview-" + entryDateString({
                                                              TAG: "Month",
                                                              _0: year,
                                                              _1: i + 1 | 0
                                                            }),
                                                        " flex flex-row items-center justify-center"
                                                      ].join(" "),
                                                    style: {
                                                      color: hasEntry ? monthColor(i + 1 | 0) : "inherit",
                                                      gridArea: "m" + monthNum
                                                    },
                                                    onClick: (function (param) {
                                                        onClick({
                                                              TAG: "Month",
                                                              _0: year,
                                                              _1: i + 1 | 0
                                                            });
                                                      })
                                                  }, monthNum);
                                      })
                                ],
                                className: "gap-px text-xs  border border-plain-700 text-plain-600",
                                style: {
                                  display: "grid",
                                  gridTemplateAreas: "\n                    \"year q1 m1 m2 m3\"\n                    \"year q2 m4 m5 m6\"\n                    \"year q3 m7 m8 m9\"\n                    \"year q4 m10 m11 m12\"\n                  \n                    ",
                                  gridTemplateColumns: "1.25fr 1.25fr 2fr 2fr 2fr ",
                                  gridTemplateRows: " repeat(4, 1.0fr)"
                                }
                              }, year.toString());
                  }),
              className: "p-4  flex-1 overflow-y-scroll flex flex-col gap-2 w-full font-black"
            });
}

function App$Day(props) {
  var entry = props.entry;
  var hasWeekEntry = props.hasWeekEntry;
  var onClick = props.onClick;
  var d = props.d;
  var theme = UseLocalStorageJs.useLocalStorageListener("theme", "light");
  var match = colorsByTheme(theme);
  console.log("render", theme);
  var beginningOfWeek = d.getDay() === 0;
  var year = d.getFullYear();
  var month = d.getMonth() + 1 | 0;
  var monthDay = d.getDate();
  var monthColor = match[0](month);
  var monthColorDim = match[1](month);
  var isToday = DateFns.isSameDay(new Date(), d);
  var tmp;
  if (beginningOfWeek) {
    var week = DateFns.format(d, "w");
    tmp = Core__Option.mapOr(Core__Int.fromString(week, undefined), null, (function (weekNum) {
            return JsxRuntime.jsx("button", {
                        children: week,
                        className: "text-left overflow-visible text-nowrap px-1 font-normal",
                        id: "dayview-" + entryDateString({
                              TAG: "Week",
                              _0: year,
                              _1: weekNum
                            }),
                        style: {
                          color: hasWeekEntry ? monthColor : "#ccc"
                        },
                        onClick: (function (param) {
                            onClick({
                                  TAG: "Week",
                                  _0: year,
                                  _1: weekNum
                                });
                          })
                      });
          }));
  } else {
    tmp = null;
  }
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                beginningOfWeek ? JsxRuntime.jsx("div", {
                        children: JsxRuntime.jsx("div", {
                              className: "h-px w-full absolute -translate-y-1/2",
                              style: {
                                background: monthColor
                              }
                            }),
                        className: "relative h-0 ml-px"
                      }) : null,
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("div", {
                              children: tmp,
                              className: " h-full w-5 flex flex-row flex-none items-center"
                            }),
                        JsxRuntime.jsxs("button", {
                              children: [
                                JsxRuntime.jsx("span", {
                                      className: ["w-1 h-full flex-none"].join(" "),
                                      style: {
                                        backgroundColor: monthColor
                                      }
                                    }),
                                JsxRuntime.jsx("span", {
                                      children: DateFns.format(d, "y-MM-dd eee"),
                                      className: [
                                          " px-2 flex-none",
                                          isToday ? "border-r-4 border-white" : ""
                                        ].join(" "),
                                      style: {
                                        color: Core__Option.isSome(entry) ? monthColor : monthColorDim
                                      }
                                    }),
                                JsxRuntime.jsx("span", {
                                      children: Core__Option.mapOr(entry, "", (function (e) {
                                              return e.title;
                                            })),
                                      className: "font-light text-white flex-none italic"
                                    })
                              ],
                              className: "h-full flex-1 flex flex-row items-center whitespace-nowrap overflow-x-hidden",
                              id: "dayview-" + entryDateString({
                                    TAG: "Date",
                                    _0: year,
                                    _1: month,
                                    _2: monthDay
                                  }),
                              onClick: (function (param) {
                                  onClick({
                                        TAG: "Date",
                                        _0: year,
                                        _1: month,
                                        _2: monthDay
                                      });
                                })
                            })
                      ],
                      className: "text-xs font-black flex flex-row items-center gap-1 h-5 whitespace-nowrap overflow-x-hidden"
                    })
              ]
            });
}

var make = React.memo(App$Day, (function (a, b) {
        var tmp = false;
        if (a.d.getTime() === b.d.getTime()) {
          var match = a.entry;
          var match$1 = b.entry;
          tmp = match !== undefined ? (
              match$1 !== undefined ? match.title === match$1.title : false
            ) : match$1 === undefined;
        }
        if (tmp) {
          return a.hasWeekEntry === b.hasWeekEntry;
        } else {
          return false;
        }
      }));

function App$Days(props) {
  var dateEntries = props.dateEntries;
  var onClick = props.onClick;
  var dateSet = props.dateSet;
  return JsxRuntime.jsx("div", {
              children: allDays(props.start, props.end).map(function (d) {
                    return JsxRuntime.jsx(make, {
                                d: d,
                                onClick: onClick,
                                hasWeekEntry: dateSet.has(DateFns.format(d, "y") + "-W" + DateFns.format(d, "w")),
                                entry: dateEntries.get(DateFns.format(d, standardDateFormat))
                              }, d.toString());
                  }),
              className: "w-full flex-2 overflow-y-scroll text-xs"
            });
}

function entryClassNameId(entryDate) {
  return Core__Option.mapOr(entryDate, "", (function (date) {
                return "entryview-" + entryDateString(date);
              }));
}

function App$Entry(props) {
  var deleteEntry = props.deleteEntry;
  var isSelectedForSet = props.isSelectedForSet;
  var setEntryToSet = props.setEntryToSet;
  var updateEntry = props.updateEntry;
  var entry = props.entry;
  var theme = UseLocalStorageJs.useLocalStorageListener("theme", "light");
  var match = colorsByTheme(theme);
  var monthColor = match[0];
  var monthColor$1 = Core__Option.mapOr(entry.date, "#fff", (function (date) {
          switch (date.TAG) {
            case "Year" :
            case "Quarter" :
                return "#fff";
            case "Week" :
                return monthColor(getMonthForWeekOfYear(date._1, date._0));
            case "Month" :
            case "Date" :
                return monthColor(date._1);
            
          }
        }));
  var dateDisplay = Core__Option.flatMap(entry.date, (function (date) {
          if (date.TAG === "Date") {
            return DateFns.format(new Date(date._0, date._1 - 1 | 0, date._2), "y-MM-dd eee");
          } else {
            return entryDateString(date);
          }
        }));
  var goToDay = function () {
    Core__Option.mapOr(entry.date, undefined, (function (entryDate) {
            var dayMatch;
            switch (entryDate.TAG) {
              case "Year" :
                  dayMatch = {
                    TAG: "Date",
                    _0: entryDate._0,
                    _1: 0,
                    _2: 1
                  };
                  break;
              case "Quarter" :
                  dayMatch = {
                    TAG: "Date",
                    _0: entryDate._0,
                    _1: entryDate._1 - 3 | 0,
                    _2: 1
                  };
                  break;
              case "Month" :
                  dayMatch = {
                    TAG: "Date",
                    _0: entryDate._0,
                    _1: entryDate._1,
                    _2: 1
                  };
                  break;
              case "Week" :
                  dayMatch = {
                    TAG: "Week",
                    _0: entryDate._0,
                    _1: entryDate._1
                  };
                  break;
              case "Date" :
                  dayMatch = {
                    TAG: "Date",
                    _0: entryDate._0,
                    _1: entryDate._1,
                    _2: entryDate._2
                  };
                  break;
              
            }
            var s = "dayview-" + entryDateString(dayMatch);
            Core__Option.mapOr(Caml_option.nullable_to_opt(document.getElementById(s)), undefined, (function (element) {
                    element.scrollIntoView({
                          behavior: "smooth",
                          block: "center"
                        });
                  }));
            var monthMatch;
            switch (entryDate.TAG) {
              case "Year" :
                  monthMatch = {
                    TAG: "Year",
                    _0: entryDate._0
                  };
                  break;
              case "Quarter" :
                  monthMatch = {
                    TAG: "Quarter",
                    _0: entryDate._0,
                    _1: entryDate._1
                  };
                  break;
              case "Week" :
                  var y = entryDate._0;
                  monthMatch = {
                    TAG: "Month",
                    _0: y,
                    _1: getMonthForWeekOfYear(entryDate._1, y)
                  };
                  break;
              case "Month" :
              case "Date" :
                  monthMatch = {
                    TAG: "Month",
                    _0: entryDate._0,
                    _1: entryDate._1
                  };
                  break;
              
            }
            Core__Option.mapOr(getElementByClassOp("monthview-" + entryDateString(monthMatch)), undefined, (function (element) {
                    element.scrollIntoView({
                          behavior: "smooth",
                          block: "center"
                        });
                  }));
          }));
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        Core__Option.mapOr(dateDisplay, null, (function (dateDisplay_) {
                                return JsxRuntime.jsx("span", {
                                            children: dateDisplay_,
                                            className: "cursor-pointer mr-2 font-black",
                                            style: {
                                              backgroundColor: isSelectedForSet ? monthColor$1 : "transparent",
                                              color: isSelectedForSet ? "black" : monthColor$1
                                            },
                                            onClick: (function (param) {
                                                if (isSelectedForSet) {
                                                  return setEntryToSet(function (param) {
                                                              
                                                            });
                                                } else {
                                                  return goToDay();
                                                }
                                              })
                                          });
                              })),
                        JsxRuntime.jsx("input", {
                              className: "flex-1 bg-inherit text-white min-w-8 italic font-light outline-none leading-none padding-none border-none h-5 -my-1",
                              placeholder: "",
                              readOnly: entry.lock,
                              type: "text",
                              value: entry.title,
                              onChange: (function (e) {
                                  updateEntry(entry.id, (function (v) {
                                          return {
                                                  id: v.id,
                                                  date: v.date,
                                                  title: e.target.value,
                                                  content: v.content,
                                                  lock: v.lock,
                                                  hide: v.hide
                                                };
                                        }));
                                })
                            }),
                        JsxRuntime.jsx("span", {
                              className: "flex-none w-4"
                            }),
                        JsxRuntime.jsx("span", {
                              children: entry.lock ? JsxRuntime.jsx("button", {
                                      children: JsxRuntime.jsx(Tb.TbLock, {}),
                                      className: [
                                          "mx-1",
                                          " text-plain-500"
                                        ].join(" "),
                                      onClick: (function (param) {
                                          updateEntry(entry.id, (function (v) {
                                                  return {
                                                          id: v.id,
                                                          date: v.date,
                                                          title: v.title,
                                                          content: v.content,
                                                          lock: false,
                                                          hide: v.hide
                                                        };
                                                }));
                                        })
                                    }) : JsxRuntime.jsxs(React.Fragment, {
                                      children: [
                                        JsxRuntime.jsx("button", {
                                              children: isSelectedForSet ? "Cancel" : "Pick Date",
                                              className: ["mx-1 "].join(" "),
                                              style: {
                                                backgroundColor: isSelectedForSet ? monthColor$1 : "white",
                                                color: "black"
                                              },
                                              onClick: (function (param) {
                                                  setEntryToSet(function (v) {
                                                        if (Caml_obj.equal(v, entry.id)) {
                                                          return ;
                                                        } else {
                                                          return entry.id;
                                                        }
                                                      });
                                                })
                                            }),
                                        JsxRuntime.jsx("button", {
                                              children: "Delete",
                                              className: [
                                                  "mx-1",
                                                  "bg-white text-black"
                                                ].join(" "),
                                              onClick: (function (param) {
                                                  deleteEntry(entry.id);
                                                })
                                            }),
                                        JsxRuntime.jsx("button", {
                                              children: entry.hide ? "Show" : "Hide",
                                              className: [
                                                  "mx-1",
                                                  "bg-white text-black"
                                                ].join(" "),
                                              onClick: (function (param) {
                                                  updateEntry(entry.id, (function (v) {
                                                          return {
                                                                  id: v.id,
                                                                  date: v.date,
                                                                  title: v.title,
                                                                  content: v.content,
                                                                  lock: v.lock,
                                                                  hide: !v.hide
                                                                };
                                                        }));
                                                })
                                            }),
                                        JsxRuntime.jsx("button", {
                                              children: JsxRuntime.jsx(Tb.TbLockOpen2, {}),
                                              className: [
                                                  "mx-1",
                                                  " text-plain-500"
                                                ].join(" "),
                                              onClick: (function (param) {
                                                  updateEntry(entry.id, (function (v) {
                                                          return {
                                                                  id: v.id,
                                                                  date: v.date,
                                                                  title: v.title,
                                                                  content: v.content,
                                                                  lock: true,
                                                                  hide: v.hide
                                                                };
                                                        }));
                                                })
                                            })
                                      ]
                                    }),
                              className: "flex flex-row items-center"
                            })
                      ],
                      className: [
                          entryClassNameId(entry.date),
                          "heading py-2 border-b flex flex-row items-center pr-4"
                        ].join(" "),
                      style: {
                        borderColor: monthColor$1,
                        color: monthColor$1
                      }
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("div", {
                            children: entry.hide ? null : JsxRuntime.jsx(App$TextArea, {
                                    content: entry.content,
                                    onChange: (function (newContent) {
                                        updateEntry(entry.id, (function (v) {
                                                return {
                                                        id: v.id,
                                                        date: v.date,
                                                        title: v.title,
                                                        content: newContent,
                                                        lock: v.lock,
                                                        hide: v.hide
                                                      };
                                              }));
                                      }),
                                    className: [
                                        "editor scroll-m-20 ",
                                        entry.hide ? "text-transparent select-none" : ""
                                      ].join(" "),
                                    readonly: entry.lock,
                                    disabled: entry.hide
                                  }),
                            className: "rounded overflow-hidden"
                          }),
                      className: "py-2"
                    })
              ]
            }, entry.id);
}

var make$1 = React.memo(App$Entry, (function (a, b) {
        var match = a.entry.date;
        var match$1 = b.entry.date;
        if ((
            match !== undefined ? (
                match$1 !== undefined ? entryDateString(match) === entryDateString(match$1) : false
              ) : match$1 === undefined
          ) && a.entry.content === b.entry.content && a.entry.lock === b.entry.lock && a.entry.hide === b.entry.hide && a.entry.title === b.entry.title) {
          return a.isSelectedForSet === b.isSelectedForSet;
        } else {
          return false;
        }
      }));

function App$Entries(props) {
  var deleteEntry = props.deleteEntry;
  var entryToSet = props.entryToSet;
  var setEntryToSet = props.setEntryToSet;
  var updateEntry = props.updateEntry;
  return JsxRuntime.jsx("div", {
              children: Core__Option.mapOr(props.entries, null, (function (entries_) {
                      return entries_.map(function (entry) {
                                  var isSelectedForSet = Core__Option.mapOr(entryToSet, false, (function (v) {
                                          return v === entry.id;
                                        }));
                                  return JsxRuntime.jsx(make$1, {
                                              entry: entry,
                                              updateEntry: updateEntry,
                                              setEntryToSet: setEntryToSet,
                                              isSelectedForSet: isSelectedForSet,
                                              deleteEntry: deleteEntry
                                            }, entry.id);
                                });
                    })),
              className: "text-xs leading-none flex-1 h-full overflow-y-scroll max-w-xl"
            });
}

function App$MenuBar(props) {
  var setTheme = props.setTheme;
  var onUnlock = props.onUnlock;
  var onLock = props.onLock;
  var onHide = props.onHide;
  var onShow = props.onShow;
  var onExportFolder = props.onExportFolder;
  var onExportFile = props.onExportFile;
  var onSort = props.onSort;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("button", {
                      children: "Sort",
                      onClick: (function (param) {
                          onSort();
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Export as File",
                      onClick: (function (param) {
                          onExportFile();
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Export as Folder",
                      onClick: (function (param) {
                          onExportFolder();
                        })
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("button", {
                              children: JsxRuntime.jsx(Tb.TbEye, {}),
                              onClick: (function (param) {
                                  onShow();
                                })
                            }),
                        JsxRuntime.jsx("button", {
                              children: JsxRuntime.jsx(Tb.TbEyeClosed, {}),
                              onClick: (function (param) {
                                  onHide();
                                })
                            }),
                        JsxRuntime.jsx("button", {
                              children: JsxRuntime.jsx(Tb.TbLock, {}),
                              onClick: (function (param) {
                                  onLock();
                                })
                            }),
                        JsxRuntime.jsx("button", {
                              children: JsxRuntime.jsx(Tb.TbLockOpen2, {}),
                              onClick: (function (param) {
                                  onUnlock();
                                })
                            }),
                        JsxRuntime.jsx("button", {
                              children: props.theme === "dark" ? "Dark Mode" : "Light Mode",
                              onClick: (function (param) {
                                  setTheme(function (t) {
                                        if (t === "dark") {
                                          return "light";
                                        } else {
                                          return "dark";
                                        }
                                      });
                                })
                            })
                      ],
                      className: "flex flex-row justify-around gap-6"
                    })
              ],
              className: "text-xs flex-none border-t border-plain-700 flex flex-row gap-6 items-center px-2 py-1"
            });
}

function App(props) {
  var match = UseLocalStorageJs$1("data", undefined);
  var setEntries = match[1];
  var entries = match[0];
  var match$1 = UseLocalStorageJs$1("theme", "dark");
  var theme = match$1[0];
  React.useEffect((function () {
          if (theme === "dark") {
            document.documentElement.classList.remove("light");
            document.documentElement.classList.add("dark");
          } else {
            document.documentElement.classList.remove("dark");
            document.documentElement.classList.add("light");
          }
        }), [theme]);
  var match$2 = useStateWithGetter(function () {
        
      });
  var getEntryToSet = match$2[2];
  var setEntryToSet = match$2[1];
  var scrollToRef = React.useRef(undefined);
  React.useEffect(function () {
        Core__Option.mapOr(Core__Option.flatMap(scrollToRef.current, (function (x) {
                    return getElementByClassOp(x);
                  })), undefined, (function (element) {
                element.scrollIntoView({
                      behavior: "smooth",
                      block: "center"
                    });
                scrollToRef.current = undefined;
              }));
      });
  var startOfCal = new Date(2010, 0, 1);
  var endOfCal = new Date(2030, 0, 1);
  var updateEntry = React.useCallback((function (id, f) {
          setEntries(function (v) {
                return Core__Option.map(v, (function (v_) {
                              return v_.map(function (entry) {
                                          if (entry.id === id) {
                                            return f(entry);
                                          } else {
                                            return entry;
                                          }
                                        });
                            }));
              });
        }), []);
  var sortEntries = function (data) {
    return Core__Option.map(data, (function (v) {
                  return v.toSorted(function (a, b) {
                              return (Core__Option.mapOr(a.date, "", (function (x) {
                                                return entryDateString(x);
                                              })) + a.id).localeCompare(Core__Option.mapOr(b.date, "", (function (x) {
                                                return entryDateString(x);
                                              })) + b.id);
                            });
                }));
  };
  var dateSet = new Set(Core__Array.keepSome(Core__Option.getOr(entries, []).map(function (entry) {
                  return entry.date;
                })).map(function (date) {
            return entryDateString(date);
          }));
  var dateEntries = new Map(Core__Array.keepSome(Core__Option.getOr(entries, []).map(function (entry) {
                  return Core__Option.map(entry.date, (function (v) {
                                return [
                                        v,
                                        entry
                                      ];
                              }));
                })).map(function (param) {
            return [
                    entryDateString(param[0]),
                    param[1]
                  ];
          }));
  var makeNewEntry = function (entryDate) {
    setEntries(function (v) {
          return sortEntries(Core__Option.map(v, (function (entries) {
                            return entries.concat([{
                                          id: (Core__Array.reduce(entries, 0, (function (a, c) {
                                                      var b = Core__Option.getOr(Core__Int.fromString(c.id, undefined), 0);
                                                      if (Caml_obj.greaterthan(a, b)) {
                                                        return a;
                                                      } else {
                                                        return b;
                                                      }
                                                    })) + 1 | 0).toString(),
                                          date: entryDate,
                                          title: "",
                                          content: "",
                                          lock: false,
                                          hide: false
                                        }]);
                          })));
        });
  };
  var onClickDate = function (entryDate) {
    ((function (x) {
            if (x !== undefined) {
              Caml_option.valFromOption(x).scrollIntoView({
                    behavior: "smooth",
                    block: "center"
                  });
            } else {
              makeNewEntry(entryDate);
              scrollToRef.current = entryClassNameId(entryDate);
            }
          })(getElementByClassOp(entryClassNameId(entryDate))));
    var tmp;
    switch (entryDate.TAG) {
      case "Year" :
          var s = "dayview-" + entryDateString({
                TAG: "Date",
                _0: entryDate._0,
                _1: 1,
                _2: 1
              });
          tmp = Caml_option.nullable_to_opt(document.getElementById(s));
          break;
      case "Quarter" :
          var s$1 = "dayview-" + entryDateString({
                TAG: "Date",
                _0: entryDate._0,
                _1: Math.imul(entryDate._1 - 1 | 0, 3),
                _2: 1
              });
          tmp = Caml_option.nullable_to_opt(document.getElementById(s$1));
          break;
      case "Month" :
          var s$2 = "dayview-" + entryDateString({
                TAG: "Date",
                _0: entryDate._0,
                _1: entryDate._1,
                _2: 1
              });
          tmp = Caml_option.nullable_to_opt(document.getElementById(s$2));
          break;
      case "Week" :
      case "Date" :
          tmp = getElementByClassOp("monthview-" + entryDateString({
                    TAG: "Year",
                    _0: entryDate._0
                  }));
          break;
      
    }
    Core__Option.mapOr(getEntryToSet(), Core__Option.mapOr(tmp, undefined, (function (element) {
                element.scrollIntoView({
                      behavior: "smooth",
                      block: "center"
                    });
              })), (function (entryId) {
            updateEntry(entryId, (function (e) {
                    return {
                            id: e.id,
                            date: entryDate,
                            title: e.title,
                            content: e.content,
                            lock: e.lock,
                            hide: e.hide
                          };
                  }));
            setEntryToSet(function (param) {
                  
                });
          }));
  };
  var formatContentForFile = function (entry) {
    return "Date: " + Core__Option.mapOr(entry.date, "", (function (x) {
                  return entryDateString(x);
                })) + "\nTitle: " + entry.title + "\n\n" + entry.content;
  };
  var onSort = function () {
    setEntries(function (v) {
          return sortEntries(v);
        });
  };
  var onExportFile = function () {
    Core__Option.mapOr(entries, undefined, (function (entries) {
            var prim = entries.map(function (v) {
                    return formatContentForFile(v);
                  }).join("\n\n");
            ExportFunctionsJs.exportToFile(prim);
          }));
  };
  var onExportFolder = function () {
    Core__Option.mapOr(entries, undefined, (function (entries) {
            var prim = entries.map(function (v) {
                  return [
                          Core__Option.mapOr(v.date, "", (function (x) {
                                  return entryDateString(x);
                                })) + (
                            Core__Option.isSome(v.date) && v.title !== "" ? "_" : ""
                          ) + v.title + ".txt",
                          formatContentForFile(v)
                        ];
                });
            ExportFunctionsJs.exportToFolder(prim);
          }));
  };
  var onShow = function () {
    setEntries(function (v) {
          return Core__Option.map(v, (function (entries) {
                        return entries.map(function (entry) {
                                    return {
                                            id: entry.id,
                                            date: entry.date,
                                            title: entry.title,
                                            content: entry.content,
                                            lock: entry.lock,
                                            hide: false
                                          };
                                  });
                      }));
        });
  };
  var onHide = function () {
    setEntries(function (v) {
          return Core__Option.map(v, (function (entries) {
                        return entries.map(function (entry) {
                                    return {
                                            id: entry.id,
                                            date: entry.date,
                                            title: entry.title,
                                            content: entry.content,
                                            lock: entry.lock,
                                            hide: true
                                          };
                                  });
                      }));
        });
  };
  var onLock = function () {
    setEntries(function (v) {
          return Core__Option.map(v, (function (entries) {
                        return entries.map(function (entry) {
                                    return {
                                            id: entry.id,
                                            date: entry.date,
                                            title: entry.title,
                                            content: entry.content,
                                            lock: true,
                                            hide: entry.hide
                                          };
                                  });
                      }));
        });
  };
  var onUnlock = function () {
    setEntries(function (v) {
          return Core__Option.map(v, (function (entries) {
                        return entries.map(function (entry) {
                                    return {
                                            id: entry.id,
                                            date: entry.date,
                                            title: entry.title,
                                            content: entry.content,
                                            lock: false,
                                            hide: entry.hide
                                          };
                                  });
                      }));
        });
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx(App$Days, {
                                      start: startOfCal,
                                      end: endOfCal,
                                      dateSet: dateSet,
                                      onClick: onClickDate,
                                      dateEntries: dateEntries
                                    }),
                                JsxRuntime.jsx(App$Months, {
                                      start: startOfCal,
                                      end: endOfCal,
                                      dateSet: dateSet,
                                      onClick: onClickDate
                                    })
                              ],
                              className: "flex flex-col h-full flex-none w-64 border-r-8 border-r-transparent"
                            }),
                        JsxRuntime.jsx(App$Entries, {
                              entries: entries,
                              updateEntry: updateEntry,
                              setEntryToSet: setEntryToSet,
                              entryToSet: match$2[0],
                              deleteEntry: (function (id) {
                                  setEntries(function (v) {
                                        return Core__Option.map(v, (function (entries) {
                                                      return entries.filter(function (entry) {
                                                                  return entry.id !== id;
                                                                });
                                                    }));
                                      });
                                })
                            })
                      ],
                      className: "flex flex-row flex-1 overflow-hidden"
                    }),
                JsxRuntime.jsx(App$MenuBar, {
                      onSort: onSort,
                      onExportFile: onExportFile,
                      onExportFolder: onExportFolder,
                      onShow: onShow,
                      onHide: onHide,
                      onLock: onLock,
                      onUnlock: onUnlock,
                      theme: theme,
                      setTheme: match$1[1]
                    })
              ],
              className: "relative font-mono h-dvh flex flex-col dark:bg-black dark:text-white"
            });
}

var make$2 = App;

export {
  make$2 as make,
}
/*  Not a pure module */
