// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as DateFns from "date-fns";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import MonacoJsx from "./Monaco.jsx";
import * as Color from "@texel/color";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Lu from "react-icons/lu";
import * as JsxRuntime from "react/jsx-runtime";
import ReactTextareaAutosize from "react-textarea-autosize";

function allDays(start, end) {
  var inc = new Date(start.getTime());
  var dayDiff = Math.floor((end.getTime() - inc.getTime()) / 86400000) | 0;
  return Core__Array.make(dayDiff, false).map(function (param, i) {
              var result = new Date(inc.getTime());
              inc.setDate(inc.getDate() + 1 | 0);
              return result;
            });
}

function hsl(h, s, l) {
  return Color.RGBToHex(Color.convert([
                  h,
                  s,
                  l
                ], Color.OKHSL, Color.sRGB));
}

function monthHue(monthInt, param) {
  return 360 / 12 * Math.imul(monthInt - 3 | 0, 5) % 360.0;
}

function monthColor(monthInt, year) {
  return hsl(monthHue(monthInt, year), 1.0, 0.7);
}

function monthColorDim(monthInt, year) {
  return hsl(monthHue(monthInt, year), 1.0, 0.3);
}

function App$Days(props) {
  var dateSet = new Set(Core__Array.keepSome(Core__Array.keepSome(Core__Option.getOr(props.entries, []).map(function (entry) {
                      return entry.date;
                    })).map(function (date) {
                if (date.TAG === "Date") {
                  return DateFns.format(new Date(date._0, date._1 - 1 | 0, date._2), "y-MM-dd");
                }
                
              })));
  return JsxRuntime.jsx("div", {
              children: allDays(props.start, props.end).map(function (d) {
                    var beginningOfWeek = d.getDay() === 0;
                    var beginningOfMonth = d.getDate() === 1;
                    var beginningOfYear = DateFns.getDayOfYear(d) === 1;
                    var hasEntry = dateSet.has(DateFns.format(d, "y-MM-dd"));
                    var year = d.getFullYear();
                    var month = Core__Option.getOr(Core__Int.fromString(DateFns.format(d, "M"), undefined), 0);
                    var monthDay = Core__Option.getOr(Core__Int.fromString(DateFns.format(d, "dd"), undefined), 0);
                    var monthColor$1 = monthColor(month, year);
                    var monthColorDim$1 = monthColorDim(month, year);
                    var isToday = DateFns.isSameDay(new Date(), d);
                    return JsxRuntime.jsxs(React.Fragment, {
                                children: [
                                  true && beginningOfWeek ? JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx("div", {
                                                className: "h-px w-full absolute-translate-y-1/2",
                                                style: {
                                                  background: monthColor$1
                                                }
                                              }),
                                          className: "relative h-0 ml-px"
                                        }) : null,
                                  false && beginningOfMonth ? JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx("div", {
                                                className: ["h-px w-full -translate-y-1/2"].join(" "),
                                                style: {
                                                  backgroundColor: monthColor$1
                                                }
                                              }),
                                          className: "relative h-0 "
                                        }) : null,
                                  false && beginningOfWeek ? JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx("div", {
                                                children: "Week " + DateFns.format(d, "w"),
                                                className: "text-sm absolute text-neutral-500 bg-black px-4 right-0 -translate-y-1/2 overflow-visible text-nowrap text-end "
                                              }),
                                          className: "relative h-0"
                                        }) : null,
                                  false && beginningOfMonth ? JsxRuntime.jsx("div", {
                                          children: JsxRuntime.jsx("div", {
                                                children: DateFns.format(d, "MMMM"),
                                                className: "text-sm absolute  bg-black px-4 right-1/4 -translate-y-1/2 overflow-visible text-nowrap ",
                                                style: {
                                                  color: monthColor$1
                                                }
                                              }),
                                          className: "relative h-0"
                                        }) : null,
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsxs("div", {
                                                children: [
                                                  true && beginningOfWeek ? JsxRuntime.jsx("div", {
                                                          children: DateFns.format(d, "w"),
                                                          className: "text-xs text-neutral-200 text-left  overflow-visible text-nowrap p-1"
                                                        }) : null,
                                                  false && beginningOfMonth ? JsxRuntime.jsx("div", {
                                                          children: DateFns.format(d, "MMM"),
                                                          className: "text-left text-xs overflow-visible text-nowrap p-1",
                                                          style: {
                                                            color: monthColor$1
                                                          }
                                                        }) : null,
                                                  false && beginningOfYear ? JsxRuntime.jsx("div", {
                                                          children: DateFns.format(d, "y"),
                                                          className: "text-xs text-white text-left  overflow-visible text-nowrap p-1"
                                                        }) : null,
                                                  false && month === 3 && monthDay === 1 ? JsxRuntime.jsx(Lu.LuFlower, {
                                                          className: "m-1",
                                                          style: {
                                                            color: monthColor$1
                                                          }
                                                        }) : null
                                                ],
                                                className: " h-6 w-5 flex flex-row"
                                              }),
                                          JsxRuntime.jsx("div", {
                                                className: ["w-1 h-6 "].join(" "),
                                                style: {
                                                  backgroundColor: monthColor$1
                                                }
                                              }),
                                          JsxRuntime.jsx("div", {
                                                children: DateFns.format(d, "y-MM-dd eee"),
                                                className: [
                                                    "px-2",
                                                    isToday ? "border-r-4 border-white" : ""
                                                  ].join(" "),
                                                style: {
                                                  color: hasEntry ? monthColor$1 : monthColorDim$1
                                                }
                                              }),
                                          JsxRuntime.jsx("div", {
                                                children: "Singapore",
                                                className: "text-neutral-500"
                                              })
                                        ],
                                        className: "flex flex-row items-center gap-1 text-sm"
                                      })
                                ]
                              }, DateFns.format(d, "y-MM-dd"));
                  }),
              className: "w-fit flex-none p-2 h-full overflow-y-scroll "
            });
}

function App$TextArea(props) {
  var onChange = props.onChange;
  return JsxRuntime.jsx(ReactTextareaAutosize, {
              value: props.content,
              className: "bg-black w-full",
              onChange: (function (e) {
                  var value = e.target.value;
                  onChange(value);
                })
            });
}

function App$Entries(props) {
  var updateEntry = props.updateEntry;
  return JsxRuntime.jsx("div", {
              children: Core__Option.mapOr(props.entries, null, (function (entries_) {
                      return entries_.map(function (entry) {
                                  var monthColor$1 = Core__Option.mapOr(entry.date, "#fff", (function (date) {
                                          if (date.TAG === "Date") {
                                            return monthColor(date._1, 2000);
                                          } else {
                                            return "#fff";
                                          }
                                        }));
                                  var dateDisplay = Core__Option.flatMap(entry.date, (function (date) {
                                          if (date.TAG === "Date") {
                                            return DateFns.format(new Date(date._0, date._1 - 1 | 0, date._2), "y-MM-dd");
                                          }
                                          
                                        }));
                                  return JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsxs("div", {
                                                      children: [
                                                        Core__Option.mapOr(dateDisplay, null, (function (dateDisplay_) {
                                                                return JsxRuntime.jsx("span", {
                                                                            children: dateDisplay_,
                                                                            className: "pr-2"
                                                                          });
                                                              })),
                                                        JsxRuntime.jsx("span", {
                                                              children: entry.title,
                                                              className: " text-white"
                                                            })
                                                      ],
                                                      className: " py-2 border-b ",
                                                      style: {
                                                        borderColor: monthColor$1,
                                                        color: monthColor$1
                                                      }
                                                    }),
                                                JsxRuntime.jsx("div", {
                                                      children: JsxRuntime.jsx("div", {
                                                            children: JsxRuntime.jsx(App$TextArea, {
                                                                  content: entry.content,
                                                                  onChange: (function (newValue) {
                                                                      updateEntry(entry.id, newValue);
                                                                    })
                                                                }),
                                                            className: "rounded overflow-hidden"
                                                          }),
                                                      className: "py-2"
                                                    })
                                              ]
                                            }, entry.id);
                                });
                    })),
              className: "text-xs leading-none flex-1 h-full overflow-y-scroll"
            });
}

function App(props) {
  var match = React.useState(function () {
        
      });
  var setImportData = match[1];
  var importData = match[0];
  var startOfCal = new Date(2010, 0, 1);
  var endOfCal = new Date(2030, 0, 1);
  var getDate = function (name) {
    var date = DateFns.parse(name.substring(0, 10), "y-MM-dd", 0);
    if (isNaN(date)) {
      return ;
    }
    var match = Core__Int.fromString(DateFns.format(date, "y"), undefined);
    var match$1 = Core__Int.fromString(DateFns.format(date, "MM"), undefined);
    var match$2 = Core__Int.fromString(DateFns.format(date, "dd"), undefined);
    if (match !== undefined && match$1 !== undefined && match$2 !== undefined) {
      return {
              TAG: "Date",
              _0: match,
              _1: match$1,
              _2: match$2
            };
    }
    
  };
  React.useEffect((function () {
          fetch("../testData/test.json").then(function (response) {
                  return response.json();
                }).then(function (json) {
                setImportData(function (param) {
                      return json.map(function (param, i) {
                                  var name = param[0];
                                  return {
                                          id: i.toString(),
                                          date: getDate(name),
                                          title: name,
                                          content: param[1]
                                        };
                                });
                    });
                return Promise.resolve();
              });
        }), []);
  var updateEntry = function (id, newValue) {
    setImportData(function (v) {
          return Core__Option.map(v, (function (v_) {
                        return v_.map(function (entry) {
                                    if (entry.id === id) {
                                      return {
                                              id: entry.id,
                                              date: entry.date,
                                              title: entry.title,
                                              content: newValue
                                            };
                                    } else {
                                      return entry;
                                    }
                                  });
                      }));
        });
  };
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx(App$Days, {
                            start: startOfCal,
                            end: endOfCal,
                            entries: importData
                          }),
                      JsxRuntime.jsx(App$Entries, {
                            entries: importData,
                            updateEntry: updateEntry
                          })
                    ],
                    className: "flex flex-row h-full"
                  }),
              className: "font-mono h-dvh"
            });
}

var make = App;

export {
  make ,
}
/*  Not a pure module */
