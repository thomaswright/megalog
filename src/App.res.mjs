// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Days from "./Days.res.mjs";
import * as Entry from "./Entry.res.mjs";
import * as Theme from "./Theme.res.mjs";
import * as React from "react";
import * as Common from "./Common.res.mjs";
import * as Global from "./Global.res.mjs";
import * as Months from "./Months.res.mjs";
import * as MenuBar from "./MenuBar.res.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Tb from "react-icons/tb";
import * as JsxRuntime from "react/jsx-runtime";
import * as ExportFunctionsJs from "./exportFunctions.js";

function exportToJsonFile(prim) {
  ExportFunctionsJs.exportToJsonFile(prim);
}

function App$ControlledInput(props) {
  var __placeholder = props.placeholder;
  var __className = props.className;
  var onSave = props.onSave;
  var initialValue = props.initialValue;
  var className = __className !== undefined ? __className : "";
  var placeholder = __placeholder !== undefined ? __placeholder : "Untitled";
  var match = React.useState(function () {
        return initialValue;
      });
  var setValue = match[1];
  var value = match[0];
  var inputRef = React.useRef(null);
  return JsxRuntime.jsx("input", {
              ref: Caml_option.some(inputRef),
              className: className,
              placeholder: placeholder,
              type: "text",
              value: value,
              onKeyDown: (function (e) {
                  var match = e.key;
                  switch (match) {
                    case "Enter" :
                        return onSave(value);
                    case "Escape" :
                        return setValue(function (param) {
                                    return initialValue;
                                  });
                    default:
                      return ;
                  }
                }),
              onBlur: (function (param) {
                  onSave(value);
                }),
              onChange: (function (e) {
                  setValue(e.target.value);
                })
            });
}

function App(props) {
  var match = Common.useLocalStorage("data", undefined);
  var getEntries = match[2];
  var setEntries = match[1];
  var entries = match[0];
  var match$1 = Common.useStateWithGetter(function () {
        
      });
  var getEntryToSet = match$1[2];
  var setEntryToSet = match$1[1];
  var match$2 = Theme.useTheme();
  var scrollToRef = React.useRef(undefined);
  React.useEffect(function () {
        Core__Option.mapOr(Core__Option.flatMap(scrollToRef.current, (function (x) {
                    return Global.Derived.getElementByClassOp(x);
                  })), undefined, (function (element) {
                element.scrollIntoView({
                      behavior: "smooth",
                      block: "center"
                    });
                scrollToRef.current = undefined;
              }));
      });
  var match$3 = Common.useLocalStorage("start-year", 2020);
  var setStartYear = match$3[1];
  var startYear = match$3[0];
  var match$4 = Common.useLocalStorage("end-year", 2030);
  var setEndYear = match$4[1];
  var endYear = match$4[0];
  var startOfCal = new Date(startYear, 0, 1);
  var endOfCal = new Date(endYear + 1 | 0, 0, 1);
  var updateEntry = React.useCallback((function (id, f) {
          setEntries(function (v) {
                return Core__Option.map(v, (function (v_) {
                              return v_.map(function (entry) {
                                          if (entry.id === id) {
                                            return f(entry);
                                          } else {
                                            return entry;
                                          }
                                        });
                            }));
              });
        }), []);
  var sortEntries = function (data) {
    return Core__Option.map(data, (function (v) {
                  return v.toSorted(function (a, b) {
                              return (Core__Option.mapOr(a.date, "", (function (x) {
                                                return Entry.entryDateString(x);
                                              })) + a.id).localeCompare(Core__Option.mapOr(b.date, "", (function (x) {
                                                return Entry.entryDateString(x);
                                              })) + b.id);
                            });
                }));
  };
  var dateSet = new Set(Core__Array.keepSome(Core__Option.getOr(entries, []).map(function (entry) {
                  return entry.date;
                })).map(function (date) {
            return Entry.entryDateString(date);
          }));
  var dateEntries = new Map(Core__Array.keepSome(Core__Option.getOr(entries, []).map(function (entry) {
                  return Core__Option.map(entry.date, (function (v) {
                                return [
                                        v,
                                        entry
                                      ];
                              }));
                })).map(function (param) {
            return [
                    Entry.entryDateString(param[0]),
                    param[1]
                  ];
          }));
  var makeNewEntry = function (entryDate) {
    setEntries(function (v) {
          return sortEntries(Core__Option.map(v, (function (entries) {
                            return entries.concat([{
                                          id: (Core__Array.reduce(entries, 0, (function (a, c) {
                                                      var b = Core__Option.getOr(Core__Int.fromString(c.id, undefined), 0);
                                                      if (Caml_obj.greaterthan(a, b)) {
                                                        return a;
                                                      } else {
                                                        return b;
                                                      }
                                                    })) + 1 | 0).toString(),
                                          date: entryDate,
                                          title: "",
                                          content: "",
                                          lock: false,
                                          hide: false
                                        }]);
                          })));
        });
  };
  var onClickDate = function (entryDate, withMetaKey) {
    ((function (x) {
            if (x !== undefined) {
              Caml_option.valFromOption(x).scrollIntoView({
                    behavior: "smooth",
                    block: "center"
                  });
              return ;
            } else if (withMetaKey) {
              return Core__Option.mapOr(Belt_Array.reduce(Core__Option.getOr(getEntries(), []), undefined, (function (a, c) {
                                var entryTime = Entry.getEntryDateDate(entryDate).getTime();
                                var match = c.date;
                                if (match === undefined) {
                                  if (a !== undefined) {
                                    return a;
                                  } else {
                                    return ;
                                  }
                                }
                                if (a === undefined) {
                                  return match;
                                }
                                var cTime = Entry.getEntryDateDate(match).getTime();
                                var aTime = Entry.getEntryDateDate(a).getTime();
                                return Math.abs(cTime - entryTime) < Math.abs(aTime - entryTime) ? match : a;
                              })), undefined, (function (closestDate) {
                            Core__Option.mapOr(Global.Derived.getElementByClassOp(Entry.entryClassNameId(closestDate)), undefined, (function (element) {
                                    element.scrollIntoView({
                                          behavior: "smooth",
                                          block: "center"
                                        });
                                  }));
                          }));
            } else {
              makeNewEntry(entryDate);
              scrollToRef.current = Entry.entryClassNameId(entryDate);
              return ;
            }
          })(Global.Derived.getElementByClassOp(Entry.entryClassNameId(entryDate))));
    var tmp;
    switch (entryDate.TAG) {
      case "Year" :
          tmp = Global.Derived.getElementByIdOp("dayview-" + Entry.entryDateString({
                    TAG: "Date",
                    _0: entryDate._0,
                    _1: 1,
                    _2: 1
                  }));
          break;
      case "Quarter" :
          tmp = Global.Derived.getElementByIdOp("dayview-" + Entry.entryDateString({
                    TAG: "Date",
                    _0: entryDate._0,
                    _1: Math.imul(entryDate._1 - 1 | 0, 3),
                    _2: 1
                  }));
          break;
      case "Month" :
          tmp = Global.Derived.getElementByIdOp("dayview-" + Entry.entryDateString({
                    TAG: "Date",
                    _0: entryDate._0,
                    _1: entryDate._1,
                    _2: 1
                  }));
          break;
      case "Week" :
      case "Date" :
          tmp = Global.Derived.getElementByClassOp("monthview-" + Entry.entryDateString({
                    TAG: "Year",
                    _0: entryDate._0
                  }));
          break;
      
    }
    Core__Option.mapOr(getEntryToSet(), Core__Option.mapOr(tmp, undefined, (function (element) {
                element.scrollIntoView({
                      behavior: "smooth",
                      block: "center"
                    });
              })), (function (entryId) {
            updateEntry(entryId, (function (e) {
                    return {
                            id: e.id,
                            date: entryDate,
                            title: e.title,
                            content: e.content,
                            lock: e.lock,
                            hide: e.hide
                          };
                  }));
            setEntryToSet(function (param) {
                  
                });
          }));
  };
  var formatContentForFile = function (entry) {
    return "Date: " + Core__Option.mapOr(entry.date, "", (function (x) {
                  return Entry.entryDateString(x);
                })) + "\nTitle: " + entry.title + "\n\n" + entry.content;
  };
  var formatForJson = function (entries) {
    return entries.map(function (entry) {
                return {
                        title: entry.title,
                        date: Core__Option.mapOr(entry.date, "", (function (x) {
                                return Entry.entryDateString(x);
                              })),
                        content: entry.content
                      };
              });
  };
  var onSort = function () {
    setEntries(function (v) {
          return sortEntries(v);
        });
  };
  var onExportJson = function () {
    Core__Option.mapOr(entries, undefined, (function (entries) {
            Core__Option.mapOr(JSON.stringify(formatForJson(entries)), undefined, exportToJsonFile);
          }));
  };
  var onExportFile = function () {
    Core__Option.mapOr(entries, undefined, (function (entries) {
            var prim = entries.map(function (v) {
                    return formatContentForFile(v);
                  }).join("\n\n");
            ExportFunctionsJs.exportToFile(prim);
          }));
  };
  var onExportFolder = function () {
    Core__Option.mapOr(entries, undefined, (function (entries) {
            var prim = entries.map(function (v) {
                  return [
                          Core__Option.mapOr(v.date, "", (function (x) {
                                  return Entry.entryDateString(x);
                                })) + (
                            Core__Option.isSome(v.date) && v.title !== "" ? "_" : ""
                          ) + v.title + ".txt",
                          formatContentForFile(v)
                        ];
                });
            ExportFunctionsJs.exportToFolder(prim);
          }));
  };
  var onShow = function () {
    setEntries(function (v) {
          return Core__Option.map(v, (function (entries) {
                        return entries.map(function (entry) {
                                    return {
                                            id: entry.id,
                                            date: entry.date,
                                            title: entry.title,
                                            content: entry.content,
                                            lock: entry.lock,
                                            hide: false
                                          };
                                  });
                      }));
        });
  };
  var onHide = function () {
    setEntries(function (v) {
          return Core__Option.map(v, (function (entries) {
                        return entries.map(function (entry) {
                                    return {
                                            id: entry.id,
                                            date: entry.date,
                                            title: entry.title,
                                            content: entry.content,
                                            lock: entry.lock,
                                            hide: true
                                          };
                                  });
                      }));
        });
  };
  var onLock = function () {
    setEntries(function (v) {
          return Core__Option.map(v, (function (entries) {
                        return entries.map(function (entry) {
                                    return {
                                            id: entry.id,
                                            date: entry.date,
                                            title: entry.title,
                                            content: entry.content,
                                            lock: true,
                                            hide: entry.hide
                                          };
                                  });
                      }));
        });
  };
  var onUnlock = function () {
    setEntries(function (v) {
          return Core__Option.map(v, (function (entries) {
                        return entries.map(function (entry) {
                                    return {
                                            id: entry.id,
                                            date: entry.date,
                                            title: entry.title,
                                            content: entry.content,
                                            lock: false,
                                            hide: entry.hide
                                          };
                                  });
                      }));
        });
  };
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsxs("div", {
                            children: [
                              JsxRuntime.jsx(MenuBar.SmallBar.make, {
                                    onSort: onSort,
                                    onExportFile: onExportFile,
                                    onExportFolder: onExportFolder,
                                    onExportJson: onExportJson,
                                    onShow: onShow,
                                    onHide: onHide,
                                    onLock: onLock,
                                    onUnlock: onUnlock,
                                    theme: match$2[0],
                                    setTheme: match$2[1]
                                  }),
                              JsxRuntime.jsx(Days.make, {
                                    start: startOfCal,
                                    end: endOfCal,
                                    dateSet: dateSet,
                                    onClick: onClickDate,
                                    dateEntries: dateEntries
                                  }),
                              JsxRuntime.jsx("div", {
                                    children: JsxRuntime.jsxs("div", {
                                          children: [
                                            JsxRuntime.jsx("div", {
                                                  children: JsxRuntime.jsx(App$ControlledInput, {
                                                        initialValue: startYear.toString(),
                                                        onSave: (function (v) {
                                                            setStartYear(function (old) {
                                                                  return Core__Option.getOr(Core__Int.fromString(v, undefined), old);
                                                                });
                                                          }),
                                                        className: "bg-inherit  w-full  text-center",
                                                        placeholder: "start year"
                                                      }),
                                                  className: "flex-1 px-2 "
                                                }),
                                            JsxRuntime.jsx("div", {
                                                  children: "-",
                                                  className: "flex-none"
                                                }),
                                            JsxRuntime.jsx("div", {
                                                  children: JsxRuntime.jsx(App$ControlledInput, {
                                                        initialValue: endYear.toString(),
                                                        onSave: (function (v) {
                                                            setEndYear(function (old) {
                                                                  return Core__Option.getOr(Core__Int.fromString(v, undefined), old);
                                                                });
                                                          }),
                                                        className: "bg-inherit  w-full   text-center",
                                                        placeholder: "end year"
                                                      }),
                                                  className: "flex-1 px-2 "
                                                }),
                                            JsxRuntime.jsx("div", {
                                                  children: JsxRuntime.jsx("button", {
                                                        children: JsxRuntime.jsx(Tb.TbCalendarDue, {}),
                                                        className: "px-2",
                                                        onClick: (function (e) {
                                                            var entryDate = Entry.dateToEntryDate(new Date());
                                                            onClickDate(entryDate, e.metaKey);
                                                            Core__Option.mapOr(Global.Derived.getElementByIdOp("dayview-" + Entry.entryDateString(entryDate)), undefined, (function (element) {
                                                                    element.scrollIntoView({
                                                                          behavior: "smooth",
                                                                          block: "center"
                                                                        });
                                                                  }));
                                                          })
                                                      }),
                                                  className: "flex-none text-base -my-1 "
                                                })
                                          ],
                                          className: "flex flex-row justify-between w-full border-y border-[--foreground-500] text-xs py-1 items-center "
                                        }),
                                    className: "pr-3"
                                  }),
                              JsxRuntime.jsx(Months.make, {
                                    start: startOfCal,
                                    end: endOfCal,
                                    dateSet: dateSet,
                                    onClick: onClickDate
                                  })
                            ],
                            className: "flex flex-col h-full flex-none w-64 border-r-transparent"
                          }),
                      JsxRuntime.jsx(Entry.Entries.make, {
                            entries: entries,
                            updateEntry: updateEntry,
                            setEntryToSet: setEntryToSet,
                            entryToSet: match$1[0],
                            deleteEntry: (function (id) {
                                setEntries(function (v) {
                                      return Core__Option.map(v, (function (entries) {
                                                    return entries.filter(function (entry) {
                                                                return entry.id !== id;
                                                              });
                                                  }));
                                    });
                              })
                          })
                    ],
                    className: "flex flex-row flex-1 overflow-hidden"
                  }),
              className: "relative font-mono h-dvh flex flex-col bg-[--background] text-[--foreground]"
            });
}

var make = App;

export {
  make ,
}
/* Days Not a pure module */
