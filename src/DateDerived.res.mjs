// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";

function getMonthForWeekOfYear(weekNumber, year) {
  var firstDayOfYear = new Date(year, 0, 1);
  var dayOfWeek = firstDayOfYear.getDay();
  if (dayOfWeek !== 1) {
    var offset = dayOfWeek === 0 ? 1 : 8 - dayOfWeek | 0;
    firstDayOfYear.setDate(firstDayOfYear.getDate() + offset | 0);
  }
  var dateOfWeek = new Date(firstDayOfYear.getTime());
  dateOfWeek.setDate(firstDayOfYear.getDate() + Math.imul(weekNumber - 1 | 0, 7) | 0);
  return dateOfWeek.getMonth() + 1 | 0;
}

function getDaysOfWeek(week, year) {
  var firstDayOfYear = new Date(year, 0, 1);
  var daysOffset = Math.imul(week - 1 | 0, 7);
  var dayOfWeek = firstDayOfYear.getDay();
  var offsetToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1 | 0;
  var mondayOfWeek = new Date(year, 0, (1 + daysOffset | 0) - offsetToMonday | 0);
  return Core__Array.make(7, false).map(function (param, i) {
              var day = new Date(mondayOfWeek.getTime());
              day.setDate(mondayOfWeek.getDate() + i | 0);
              return day;
            });
}

function allDays(start, end) {
  var inc = new Date(start.getTime());
  var dayDiff = Math.floor((end.getTime() - inc.getTime()) / 86400000) | 0;
  return Core__Array.make(dayDiff, false).map(function (param, _i) {
              var result = new Date(inc.getTime());
              inc.setDate(inc.getDate() + 1 | 0);
              return result;
            });
}

function allYears(start, end) {
  var startYear = start.getFullYear();
  var endYear = end.getFullYear();
  return Core__Array.make(endYear - startYear | 0, false).map(function (param, i) {
              return new Date(startYear + i | 0, 0, 1);
            });
}

function ymdDate(year, month, date) {
  return new Date(year, month, date);
}

var day_of_ms = 86400000;

export {
  day_of_ms ,
  getMonthForWeekOfYear ,
  getDaysOfWeek ,
  allDays ,
  allYears ,
  ymdDate ,
}
/* No side effect */
